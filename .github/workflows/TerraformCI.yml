name: TerraformCI
on:
  push:
    branches:
      - main

env:
  TF_VERSION: 1.1.2
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/test-GithubActionRole
  AWS_DEFAULT_REGION: ap-northeast-1
  AWS_PROFILE: GitHubActions

permissions:
  id-token: write
  contents: read

jobs:
  set-matrix:
    runs-on: ubuntu-20.04

    env:
      TF_ROOT_DIR: .

    outputs:
      dirs: ${{ steps.find-tfstate-dirs.outputs.dirs }}

    steps:
      - uses: actions/checkout@v3

      # https://zenn.dev/shonansurvivors/articles/22e83a31abeb62
      - name: Find tfstate dirs
        id: find-tfstate-dirs
        run: |
          # https://stackoverflow.com/questions/26287130/converting-lines-to-json-in-bash
          dirs=$(find ${TF_ROOT_DIR} -type f -name '*.tf' | xargs dirname | grep -v 'modules\|\.terraform' | sort | uniq | jq -R -s -c 'split("\n")[:-1]')
          echo $dirs 
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

  terraform:
    needs: set-matrix
    runs-on: ubuntu-20.04
    timeout-minutes: 30

    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        TF_DIR: ${{ fromJson(needs.set-matrix.outputs.dirs) }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.TF_DIR }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Exec Terraform fmt check
        run: |
          terraform fmt -recursive -check

      - name: Exec Terraform init
        run: |
          pwd; terraform init

      - name: Exec Terraform plan
        run: |
          pwd
          aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile ${{ env.AWS_PROFILE }}
          aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile ${{ env.AWS_PROFILE }}
          aws configure set aws_session_token ${AWS_SESSION_TOKEN} --profile ${{ env.AWS_PROFILE }}
          terraform plan -no-color
        timeout-minutes: 1

  #     # - name: Exec Terraform apply
  #     #   uses: dflook/terraform-apply@v1
  #     #   with:
  #     #     path: policys
  #     #     auto_approve: true
